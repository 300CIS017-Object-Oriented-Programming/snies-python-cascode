Index: src/view.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sniesController import SniesController\r\nimport pandas as pd\r\nimport streamlit as st\r\nfrom streamlit import button\r\nimport os\r\n\r\nclass Menu:\r\n    def __init__(self):\r\n        self.controladorSnies = SniesController()\r\n\r\n\r\n        self.archivos_predeterminados = self.controladorSnies.listar_archivos_predeterminados()\r\n        [anio_min, anio_max] = self.controladorSnies.obtener_anio_minimo_y_maximo(self.archivos_predeterminados)\r\n\r\n        self.ANIO_INICIO = anio_min\r\n        self.ANIO_FINAL = anio_max\r\n\r\n\r\n    def mostrar_interfaz(self):\r\n        st.set_page_config(page_title=\"Gestor SNIES\", layout=\"wide\")\r\n        st.sidebar.title(\"Navegación\")\r\n        page = st.sidebar.selectbox(\"Selecciona una página:\", [\"Inicio\", \"Carga de Archivos\", \"Procesar Datos\", \"Resultados\"])\r\n        if page == \"Inicio\":\r\n            self.mostrar_inicio()\r\n        elif page == \"Carga de Archivos\":\r\n            self.mostrar_carga_archivos()\r\n        elif page == \"Procesar Datos\":\r\n            self.procesar_datos()\r\n        elif page == \"Resultados\":\r\n            self.mostrar_resultados()\r\n\r\n\r\n    def mostrar_carga_archivos(self):\r\n        st.title(\"Carga de Archivos\")\r\n        # Mostrar archivos predeterminados\r\n        st.subheader(\"Archivos Cargados Predeterminados (Últimos 4 años)\")\r\n\r\n\r\n        if self.archivos_predeterminados:\r\n            for archivo in self.archivos_predeterminados:\r\n                st.write(f\"✔\uFE0F {archivo}\")\r\n        else:\r\n            st.write(\"No hay archivos disponibles.\")\r\n        # Cargar archivos nuevos\r\n        st.subheader(\"Subir Archivos Nuevos\")\r\n        archivos_subidos = st.file_uploader(\"Selecciona archivos Excel:\", accept_multiple_files=True, type=[\"xlsx\"])\r\n        if archivos_subidos:\r\n            archivos_guardados = self.controladorSnies.cargar_archivos_nuevos(archivos_subidos)\r\n            st.success(f\"Archivos cargados correctamente: {', '.join(archivos_guardados)}\")\r\n\r\n\r\n    def mostrar_inicio(self):\r\n        st.title(\"Bienvenido al Gestor SNIES\")\r\n        st.write(\"\"\"\r\n        Esta aplicación facilita la consolidación de datos académicos. \r\n        Utiliza el menú de la izquierda para navegar entre las secciones.\r\n        \"\"\")\r\n\r\n\r\n    def procesar_datos(self):\r\n        # BARRA LATERAL: --------------------------------------------\r\n        st.sidebar.title(\"Filtrar programas académicos\")\r\n        filtro_nombre = st.sidebar.text_input(\"Escriba una palabra para buscar en los programas académicos disponibles: \",\r\n                                              placeholder=\"Por ej. 'Medicina', 'Ingeniería'\")\r\n        st.sidebar.write(\"Nota: si al filtrar no encuentra su programa académico, preste atención a las tildes (´) \t\"\r\n                         \":nerd_face:, puede que su Programa Académico esté guardado con ellas. :stuck_out_tongue_winking_eye:\")\r\n\r\n        st.sidebar.title('Entrada de datos para el procesamiento')\r\n        # Cambia las fechas de año máximas y mínimas según los archivos que hayan\r\n        self.ANIO_INICIO, self.ANIO_FINAL = st.sidebar.slider('Selecciona los años en los cuáles buscar:',\r\n                                               self.ANIO_INICIO, self.ANIO_FINAL, (self.ANIO_INICIO, self.ANIO_FINAL))\r\n\r\n        # INICIALIZAR VARIABLES EN SESSION STATE----------------------\r\n        if \"anio_ini\" not in st.session_state or st.session_state.get(\"ANIO_INI\") != self.ANIO_INICIO:\r\n            st.session_state.ANIO_INI = self.ANIO_INICIO\r\n            st.session_state.ANIO_FINAL = self.ANIO_FINAL\r\n            st.session_state.df_opciones = self.obtener_filtrado_de_programas(self.ANIO_INICIO)\r\n\r\n        if \"df_filtrado\" not in st.session_state:\r\n            st.session_state.df_filtrado = st.session_state.df_opciones\r\n\r\n        # PANTALLA PRINCIPAL: ---------------------------------------\r\n        st.title(\"Procesar Datos Académicos\")\r\n\r\n        if not st.session_state.df_filtrado.empty:\r\n            st.session_state.df_filtrado = st.session_state.df_opciones\r\n\r\n\r\n            if filtro_nombre:\r\n                st.session_state.df_filtrado = st.session_state.df_filtrado[\r\n                    st.session_state.df_filtrado[\"PROGRAMA ACADÉMICO\"].str.contains(filtro_nombre, case=False, na=False)]\r\n                st.session_state.df_filtrado.reset_index(drop=True, inplace=True)\r\n\r\n            # Crea un set para los codigos snies\r\n            if \"filas_seleccionadas\" not in st.session_state:\r\n                st.session_state.filas_seleccionadas = set()\r\n\r\n            event = st.dataframe(\r\n                st.session_state.df_filtrado,\r\n                key=\"opciones_df\",\r\n                on_select=\"rerun\",\r\n                selection_mode=\"multi-row\",\r\n                #hide_index=True,\r\n            )\r\n\r\n            if event.selection:\r\n                selected_rows = event.selection['rows']  # Filas seleccionadas\r\n                selected_snies = st.session_state.df_filtrado.loc[selected_rows, 'CÓDIGO SNIES DEL PROGRAMA'].tolist()\r\n                st.session_state.filas_seleccionadas.update(selected_snies)\r\n\r\n\r\n            if st.button(\"Limpiar listado de códigos SNIES\"):\r\n                st.session_state.filas_seleccionadas.clear()\r\n                st.session_state.selected_values = []\r\n\r\n            list_filas_seleccionadas = list(st.session_state.filas_seleccionadas)\r\n            # Mostrar la lista resultante en Streamlit\r\n            st.write(f\"Códigos SNIES seleccionados: {list_filas_seleccionadas}\")\r\n\r\n            if list_filas_seleccionadas and st.button(\"Procesar datos\"):\r\n                self.controladorSnies.procesarDatos(self.ANIO_INICIO, self.ANIO_FINAL, list_filas_seleccionadas)\r\n                with st.spinner('Procesando...'):\r\n\r\n                    st.session_state.df_consolidado = self.controladorSnies.procesarDatos(self.ANIO_INICIO, self.ANIO_FINAL, list_filas_seleccionadas)\r\n\r\n\r\n                    st.success(\"¡Datos procesados con éxito!\")\r\n                    st.success(\"¡Vaya a la página de Resultados para exportar sus resultados! :hugging_face: :money_mouth_face::money_mouth_face:\")\r\n\r\n\r\n\r\n\r\n\r\n    def obtener_filtrado_de_programas(self, ANIO_INI):\r\n        anio = str(ANIO_INI)\r\n        RUTA = \"C:/SNIES_EXTRACTOR/inputs/admitidos\" + anio +\".xlsx\"\r\n        df = pd.read_excel(RUTA, usecols=[\"PROGRAMA ACADÉMICO\", \"INSTITUCIÓN DE EDUCACIÓN SUPERIOR (IES)\",\r\n                                          \"CÓDIGO SNIES DEL PROGRAMA\", \"NIVEL DE FORMACIÓN\", \"IES_PADRE\",\r\n                                          \"PRINCIPAL O SECCIONAL\"] )\r\n        df = df.drop_duplicates(subset=[\"PROGRAMA ACADÉMICO\", \"INSTITUCIÓN DE EDUCACIÓN SUPERIOR (IES)\", \"CÓDIGO SNIES DEL PROGRAMA\"])\r\n        df = df.reset_index(drop=True)\r\n\r\n        return df\r\n\r\n\r\n    def mostrar_resultados(self):\r\n        st.title(\"Resultados Consolidados\")\r\n\r\n        if 'df_consolidado' not in st.session_state:\r\n            st.session_state.df_consolidado = pd.DataFrame()\r\n\r\n        if not st.session_state.df_consolidado.empty:\r\n            # OPCIONES PARA ELEGIR CÓMO EXPORTAR LOS ARCHIVOS\r\n\r\n            if \"export_xlsx\" not in st.session_state:\r\n                st.session_state.export_xlsx = False\r\n            if \"export_json\" not in st.session_state:\r\n                st.session_state.export_json = False\r\n            if \"export_csv\" not in st.session_state:\r\n                st.session_state.export_csv = False\r\n\r\n                # Mostrar los checkboxes para seleccionar formatos de exportación\r\n            st.markdown(\"### Selecciona los formatos para exportar los datos procesados:\")\r\n\r\n            st.session_state.export_xlsx = st.checkbox(\"Exportar a Excel (.xlsx)\",\r\n                                                       value=st.session_state.export_xlsx)\r\n            st.session_state.export_json = st.checkbox(\"Exportar a JSON (.json)\",\r\n                                                       value=st.session_state.export_json)\r\n            st.session_state.export_csv = st.checkbox(\"Exportar a CSV (.csv)\",\r\n                                                      value=st.session_state.export_csv)\r\n\r\n            if 'formatos' not in st.session_state:\r\n                st.session_state.formatos = []\r\n\r\n            st.write(f\"Formatos seleccionados a exportar: {st.session_state.formatos}\")\r\n\r\n            # Botón para ejecutar la exportación\r\n            if st.button(\"Exportar archivos\"):\r\n                if st.session_state.export_xlsx:\r\n                    st.session_state.formatos.append(\"xlsx\")\r\n                if st.session_state.export_json:\r\n                    st.session_state.formatos.append(\"json\")\r\n                if st.session_state.export_csv:\r\n                    st.session_state.formatos.append(\"csv\")\r\n\r\n                if st.session_state.formatos:\r\n                    self.exportar_datos(st.session_state.df_consolidado, st.session_state.formatos)\r\n                    st.session_state.formatos = []\r\n                else:\r\n                    st.warning(\"Selecciona al menos un formato para exportar.\")\r\n\r\n\r\n        else:\r\n            st.write(\"Aún no hay datos para exportar :disappointed_relieved: :sleepy:\")\r\n\r\n    def exportar_datos(self, dataframe, formato):\r\n        if \"xlsx\" in formato:\r\n            filename = \"Resultados.xlsx\"\r\n            dataframe.to_excel(filename, index=False)\r\n            st.success(f\"Archivo exportado como {filename} correctamente.\")\r\n        if \"json\" in formato:\r\n            filename = \"Resultados.json\"\r\n            dataframe.to_json(filename, orient=\"records\")\r\n            st.success(f\"Archivo exportado como {filename} correctamente.\")\r\n        if \"csv\" in formato:\r\n            filename = \"Resultados.csv\"\r\n            dataframe.to_csv(filename, index=False)\r\n            st.success(f\"Archivo exportado como {filename} correctamente.\")\r\n        else:\r\n            st.error(\"Formato no soportado.\")\r\n
===================================================================
diff --git a/src/view.py b/src/view.py
--- a/src/view.py	(revision f6b9844b762432544dccaaf1dd183d422b65700e)
+++ b/src/view.py	(date 1732541317024)
@@ -118,12 +118,9 @@
             st.write(f"Códigos SNIES seleccionados: {list_filas_seleccionadas}")
 
             if list_filas_seleccionadas and st.button("Procesar datos"):
-                self.controladorSnies.procesarDatos(self.ANIO_INICIO, self.ANIO_FINAL, list_filas_seleccionadas)
                 with st.spinner('Procesando...'):
-
                     st.session_state.df_consolidado = self.controladorSnies.procesarDatos(self.ANIO_INICIO, self.ANIO_FINAL, list_filas_seleccionadas)
 
-
                     st.success("¡Datos procesados con éxito!")
                     st.success("¡Vaya a la página de Resultados para exportar sus resultados! :hugging_face: :money_mouth_face::money_mouth_face:")
 
